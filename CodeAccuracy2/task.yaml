accessible: true
author: Yakoub J, Rucquoy A
categories:
- module2
context: |-
    In order to discover the importance of pre/post conditions and invariants in your programs, we will take the example of QuickSort.

    Quicksort is a divide-and-conquer method for sorting. It works by partitioning an array into two parts, then sorting the parts independently.

    .. figure:: /course/LEPL1402/CodeAccuracy2/quicksort-overview.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center

    The crux of the method is the partitioning process , which can be summarized as follows :

    .. figure:: /course/LEPL1402/CodeAccuracy2/partitioning-overview.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center

    Even with this simple algorithm, mistakes can occur and that is why we ask you to complete the implementation
    contained in this file_ , without forgetting to add assert statements in each method (as they will be tested separately in INGINIOUS).

    .. _file : /course/LEPL1402/CodeAccuracy2/QuickSort.java
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[TESTABLE] Code accuracy - Practical exercise'
network_grading: false
order: 5
problems:
    exch_code:
        header: 'Paste here the **body** of your **swap(Object[] a, int i, int j)**
            method:'
        type: code
        default: ''
        language: java
        name: ''
    partition_code:
        type: code
        name: ''
        language: java
        default: ''
        header: 'Paste here the **body** of your **partition(Comparable[] a, int left,
            int right)** method:'
    sort_code:
        header: 'Paste here the **body** of your **sort(Comparable[] a)** method:'
        name: ''
        language: java
        default: ''
        type: code
    sort_code2:
        default: ''
        header: 'Paste here the **body** of your **sort(Comparable[] a, int left,
            int right)** method:'
        name: ''
        type: code
        language: java
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
