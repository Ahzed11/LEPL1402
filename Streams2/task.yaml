accessible: true
author: Yakoub J, Rucquoy A
categories:
- module5
context: |-
    In order to understand why the Stream class could be useful for genericity, we purpose you this small exercise that merged casting and streams.

    Given the Student_ class, You are asked to write the implementation of the StudentFunctions_ class ( that implements the StudentStreamFunction_ interface ) :

    .. code-block:: java

       import java.util.Map;
       import java.util.function.Predicate;
       import java.util.stream.Stream;
       import java.util.Comparator;

       public interface StudentStreamFunction {

       // In order to test efficiently your code, we use a Map<String, Predicate<?>>
       // structured like that :
       //    Key : String that is one of the fields of Student
       //          ( "firstName", "lastName", "section", "courses_results")
       //    Value : Predicate bounded to the type of the field to perform a check condition
       //
       // For example :
       //    Key:   "firstName"
       //  Value:   Predicate<String>


       // Returns a student if any match the given conditions
       // if it is not possible, you must return null
       public Student findFirst(Stream<Student> studentsStream,
                                Map<String, Predicate<?>> conditions);

       // Returns a array of student(s) that match the given conditions
       public Student[] findAll(Stream<Student> studentsStream,
                                Map<String, Predicate<?>> conditions);

       // Return true if we could find n student(s) that match the given condition
       public boolean exists(Stream<Student> studentsStream,
                             Map<String, Predicate<?>> conditions,
                             int n);

       // Returns a ordered array of student(s) that match the given conditions,
       // depending of the given comparator
       public Student[] filterThenSort(Stream<Student> studentsStream,
                                       Map<String, Predicate<?>> conditions,
                                       Comparator<Student> comparator);

       }

    .. _StudentStreamFunction: /course/LEPL1402/Streams2/StudentStreamFunction.java
    .. _Student: /course/LEPL1402/Streams2/Student.java
    .. _StudentFunctions: /course/LEPL1402/Streams/StudentFunctions.java
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[TESTABLE] Dealing with Streams - 2'
network_grading: false
order: 37
problems:
    student_findFirst:
        header: 'Paste here the **body** of your ``findFirst`` method:'
        type: code
        language: java
        name: ''
        default: ''
    student_findAll:
        default: ''
        header: 'Paste here the **body** of your ``findAll`` method:'
        type: code
        language: java
        name: ''
    student_exists:
        type: code
        header: 'Paste here the **body** of your ``exists`` method:'
        name: ''
        default: ''
        language: java
    student_filterThenSort:
        name: ''
        type: code
        default: ''
        language: java
        header: 'Paste here the **body** of your ``filterThenSort`` method:'
    student_util:
        header: 'You can paste here additional methods if you need :'
        name: ''
        language: java
        optional: 'on'
        default: ''
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
