accessible: true
author: Yakoub J, Rucquoy A
categories:
- module3
context: |-
    In this task, you have to implement your own version of the famous java's ``ArrayList<E>`` : a dynamic sized array. Each time you want to add an element, you must check that the item can fit and then append it at the end of the list.
    If the array is too small, you need to resize it so that new items can be added in the future. To remove an element you need to specify
    an index to choose which element of the list you want to remove (``remove(0)`` for the first ... ``remove(size()-1)`` for the last). **Never** leave "blanks" in your array.
    When you remove an element at some ``index``, **all subsequents** elements must be "shifted".

    So if your list look like this:

    .. figure:: /course/LEPL1402/MyArrayList/before.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center

    Then after the call ``remove(1)`` it should look like this:

    .. figure:: /course/LEPL1402/MyArrayList/after.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center


    You also need to implement the ``MyArrayListIterator`` class.
    Iterator_ is an interface you have to implement in order to make the class implementing it able to enumerate/browse/iterate over an object : here, we want you to implement a FIFO order iterator
    over your ``MyArrayList``.

     **Pay attention**, we add some constraints for this task:

        - Your iterator don't have to implement the ``remove`` method from Iterator_.
        - Your iterator must throw a ``ConcurrentModificationException`` when you want to get the next element but some other element has been added to the list meanwhile.
        - You cannot use ``System.arraycopy`` for this task.
        - Your constructor must throw an ``IndexOutOfBoundsException`` if the parameter is smaller than 0.
        - your ``remove`` method must throw an ``IndexOutOfBoundsException`` if the index parameter is smaller than ``0`` or greater than ``size()-1``.

    A lot of classes implement this interface, including the official ArrayList_ from java. We **strongly** encourage you to experiment how the ``ArrayList<E>`` iterator works before implementing yours.

    .. _Iterator : https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
    .. _ArrayList: https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html


    Here is the class (downloadable here_) where we will insert your code :

    .. _here : /course/LEPL1402/MyArrayList/MyArrayList.java

    .. code-block:: java

        import java.util.ConcurrentModificationException;
        import java.util.Iterator;

        public class MyArrayList<Item> implements Iterable<Item> {

            private Object [] list;
            private int size;


            public MyArrayList(int initSize){
                // YOUR CODE HERE
            }


            /*
            * Checks if 'list' needs to be resized then add the element at the end
            * of the list.
            */
            public void enqueue(Item item){
                // YOUR CODE HERE
            }


            /*
            * Removes the element at the specified position in this list.
            * Returns the element that was removed from the list. You dont need to
            * resize when removing an element.
            */
            public Item remove(int index){
                // YOUR CODE HERE
            }


            public int size(){
                return this.size;
            }


            @Override
            public Iterator<Item> iterator() {
                return new MyArrayListIterator();
            }


            private class MyArrayListIterator implements Iterator<Item> {
                // YOUR CODE HERE
            }

        }
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[TESTABLE] MyArrayList'
network_grading: false
order: 16
problems:
    student_constructor:
        type: code
        default: ''
        header: 'Paste here the **body** of your constructor ``MyArrayList(int initSize)``:'
        name: ''
        language: java
    student_enqueue:
        default: ''
        language: java
        type: code
        name: ''
        header: 'Paste here the **body** of your ``enqueue`` method:'
    student_remove:
        language: java
        default: ''
        name: ''
        type: code
        header: 'Paste here the **body** of your ``remove(int index)`` method:'
    student_iterator:
        header: 'Paste here the **body** of your ``ListIterator`` class:'
        type: code
        language: java
        name: ''
        default: ''
    student_utils:
        name: ''
        type: code
        optional: 'on'
        header: 'Paste here (if needed) auxiliary methods (body **and** signatures)
            for your ``MyArrayList`` class:'
        language: java
        default: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
