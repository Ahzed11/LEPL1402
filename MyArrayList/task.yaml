author: "Yakoub J, Rucquoy A"
accessible: true
name: "[TESTABLE] My ArrayList"
context: |-
    In this task, you have to implement your own version of the famous java's ``ArrayList<E>`` : a dynamic sized array. Each time you want to add an element, you must check that the item can fit and then append it at the end of the list. 
    If the array is too small, you need to resize it so that new items can be added in the future. Removing an element is a bit different: you need to specify 
    an index to choose which element of the list you want to remove (``remove(0)`` for the first ... ``remove(size()-1)`` for the last). **Pay attention**: your ``remove`` method 
    must throw an ``IndexOutOfBoundsException`` if the index parameter is smaller than ``0`` or greater than ``size()-1``


    
    You also need to implement the ``MyArrayListIterator`` class.
    Iterator_ is an interface you have to implement in order to make the class implementing it able to enumerate/browse/iterate over an object : here, we want you to implement a FIFO order iterator
    over your ``MyArrayList``. **Pay attention**:

        - Your iterator don't have to implement the ``remove`` method from Iterator_.
        - Your iterator must throw a ``ConcurrentModificationException`` when you want to get the next element but some other element has been added to the list meanwhile.

    .. _Iterator : https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html


    Here is the class (downloadable here_) where we will insert your code : 

    .. _here : /course/LEPL1402/MyArrayList/MyArrayList.java

    .. code-block:: java

        import java.util.ConcurrentModificationException;
        import java.util.Iterator;

        public class MyArrayList<Item> implements Iterable<Item> {

            private Object [] list;
            private int size;


            public MyArrayList(int initSize){
                // YOUR CODE HERE
            }


            /*
            * Checks if 'list' needs to be resized then add the element at the end 
            * of the list.
            */
            public void enqueue(Item item){
                // YOUR CODE HERE
            }


            /*
            * Removes the element at the specified position in this list.
            * Returns the element that was removed from the list. You dont need to 
            * resize when removing an element.
            */
            public Item remove(int index){
                // YOUR CODE HERE
            }


            public int size(){
                return this.size;
            }


            @Override
            public Iterator<Item> iterator() {
                return new MyArrayListIterator();
            }


            private class MyArrayListIterator implements Iterator<Item> {
                // YOUR CODE HERE
            }

        }



    
problems:

    student_constructor:
        type: "code"
        language: java
        header: |-
            Paste here the **body** of your constructor ``MyArrayList(int initSize)``:


    student_enqueue:
        type: "code"
        language: java
        header: |-
            Paste here the **body** of your ``enqueue`` method:


    student_remove:
        type: "code"
        language: java
        header: |-
            Paste here the **body** of your ``remove(int index)`` method:


    student_iterator:
        type: "code"
        language: java
        header: |-
            Paste here the **body** of your ``ListIterator`` class:


    student_utils:
        type: "code"
        language: "java"
        header: |-
            Paste here (if needed) auxiliary methods (body **and** signatures) for your ``MyArrayList`` class:
        optional: true

environment: java8scala