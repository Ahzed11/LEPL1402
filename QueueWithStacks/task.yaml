accessible: true
author: Yakoub J, Rucquoy A
categories:
- module3
context: |-
    In this short exercise we will ask you to implement a FIFO queue using two stacks (provided as two Java ``Stack<E>``). We need you to provide 4 methods :
    ``enqueue``, ``dequeue``, ``peek``, ``empty``. You can use the ``Stack`` API_ , but you can't instantiate a new ``Stack``. Use ``s1`` and ``s2`` from the MyQueue_ class below.

    .. _API : https://docs.oracle.com/javase/8/docs/api/java/util/Stack.html
    .. _MyQueue: /course/LEPL1402/QueueWithStacks/MyQueue.java

    .. code-block:: java

        import java.util.Stack;

        public class MyQueue<E> {

            Stack<E> s1;
            Stack<E> s2;

            private E front;

            /*
            * Constructor
            */
            public MyQueue() {
                s1 = new Stack<>();
                s2 = new Stack<>();
                this.front = null;
            }

            /*
            * Push element x to the end of the queue (remember, a queue is FIFO)
            */
            public void enqueue(E elem) {
                //TODO
            }

            /*
            * Removes the front element of this queue
            */
            public E dequeue() {
                //TODO
            }

            /*
            * Get the first element of this list but does not remove it
            */
            public E peek() {
                //TODO
            }

            /*
            * Tells if the queue is empty or not.
            */
            public boolean empty() {
                //TODO
            }
        }
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[Module 3] Queue with two stacks'
network_grading: false
order: 28
problems:
    enqueue:
        type: code
        language: java
        default: ''
        header: 'Paste here the **body** of your ``enqueue`` method:'
        name: ''
    dequeue:
        type: code
        header: 'Paste here the **body** of your ``dequeue`` method:'
        name: ''
        default: ''
        language: java
    peek:
        name: ''
        header: 'Paste here the **body** of your ``peek`` method:'
        type: code
        default: ''
        language: java
    empty:
        type: code
        header: 'Paste here the **body** of your ``empty`` method:'
        default: ''
        language: java
        name: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
