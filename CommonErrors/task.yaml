accessible: true
author: "Yakoub J, Rucquoy A"
environment: mcq
error_message: "Try again!"
success_message: "Good job!"
name: "[TESTABLE] 10 Common errors for Java Beginners"
problems:
  mcq1:
    type: multiple_choice
    name: Confusing object comparison (== instead of .equals)
    header: |-

      Suppose you run the following code, what will you on STDOUT ?

      .. code-block:: java

        public static void main(String... args) {
          Integer i1 = 128;
          Integer i2 = 128;
          Integer i3 = 42;
          Integer i4 = 42;
          String s1 = "EPL";
          String s2 = new String("EPL");
          if (i1 == i2) {
            System.out.println("i1 is equal to i2");
          } else {
            System.out.println("i1 is not equal to i2");
          }
          if (i3 == i4) {
            System.out.println("i3 is equal to i4");
          } else {
            System.out.println("i3 is not equal to i4");
          }
          if (s1 == s2) {
            System.out.println("s1 is equal to s2");
          } else {
            System.out.println("s1 is not equal to s2");
          }
        }
    choices: 
      -
        text: |-
          .. code-block::
          
            i1 is not equal to i2
            i3 is equal to i4
            s1 is not equal to s2
        valid: true
      -
        text: |-
          .. code-block::

            i1 is equal to i2
            i3 is equal to i4
            s1 is not equal to s2      
        feedback: "Java cached only soms Integers (from -127 to 127) references so == will returns false whereas .equals() give true"
      -
        text: |-
          .. code-block::

            i1 is not equal to i2
            i3 is equal to i4
            s1 is equal to s2
        feedback: "String constants (s1) and String object (s2) aren't the same kind of object , even thought they represent the 'same' string"
  mcq2:
    type: multiple_choice
    header: "Arrays start at :"
    name: "Confusing about 0-based or 1-based index"
    choices:
      -
        text: "0"
        valid: true
      -
        text: "1"
        feedback: "Java is not an 1-based array index language like MathLab or R"
  mcq3:
    type: multiple_choice
    name: Modifying a collection while iterating it
    header: |-
      What is the problem in this code ?
      
      .. code-block:: java

        List<String> fixedList = Arrays.asList("Apple", "Banana", "Carrot", "Grape");
        List<String> listFruit = new ArrayList<>(fixedList);
 
        for (String fruit : listFruit) {
          if (fruit.contains("e")) {
            listFruit.remove(fruit);
          }
        }
    choices:
      -
        text: "This code throw a ConcurrentModificationException but only on multi thread programs"
        feedback: "Even in single thread programs, it causes the iteration to behalve unpredictably as the content of the list get changed"
      -
        text: "This code throw a ConcurrentModificationException"
        valid: true
  mcq4:
    type: multiple_choice
    multiple: true
    name: Confusing about object reference
    header: Which code sample(s) produce a problem ?
    choices:
      -
        text: |-
          .. code-block:: java

            String ptr = null;
            if (ptr.equals("EPL")) {
              System.out.println("SAME");
            }
        valid: true
        feedback: You identified the NullPointerException
      -
        text: |-
          .. code-block:: java

            String s;
            if (s.equals("EPL")) {
              System.out.println("SAME");
            }
        valid: true
        feedback: You identified the "variable s might not have been initialized error"
      -
        text: |-
          .. code-block:: java
            
            // a random boolean
            Random r = new Random();
            boolean value = r.nextBoolean();
            
            String s = (value) ? "EPL" : null;
            if (s.equals("EPL")) {
              System.out.println("SAME");
            }
        feedback: "There is not always a problem here : it depends on the random boolean value"
  mcq5:
    type: multiple_choice
    name: Enumeration
    header: |-
      
      What could be a problem here ?

      .. code-block:: java
        
        public static void main(String args[]) {
          Hashtable sampleMap = new Hashtable();
          Enumeration enumeration = sampleMap.elements();
          enumeration.nextElement();
        }
    choices:
      -
        text: |-
          A NoSuchElementException will occur as we have no element in the hashtable. 
        valid: true
        feedback: Thereby we must call "enumeration.hasMoreElements()" each time before any call of enumeration.nextElement();
      -
        text: |-
          A RuntimeException will occur as we have no element in the hashtable.
        feedback: NoSuchElementException extends RuntimeException
  mcq6:
    type: multiple_choice
    name: Forgetting to free resources
    multiple: true
    header: |-

      Select correct code sample(s) that does the same thing that this unsafe code sample :

      .. code-block:: java

        PrintWriter writer = null;

        try {
          writer = new PrintWriter(new File("EPL.txt"));
          writer.write("WhateverStringIWant");
        } catch (Exception err) {
          err.printStackTrace();
        }
    choices:
      -
        text: |-
          .. code-block:: java

            PrintWriter writer = null;

            try {
              writer = new PrintWriter(new File("EPL.txt"));
              writer.write("WhateverStringIWant");
              writer.close();
            } catch (Exception err) {
              err.printStackTrace();
            }
        feedback: "Not safe as it is still possible to leak the file ressource in the catch part"
      -
        text: |-
          .. code-block:: java

            PrintWriter writer = null;

            try {
              writer = new PrintWriter(new File("EPL.txt"));
              writer.write("WhateverStringIWant");
            } catch (Exception err) {
              err.printStackTrace();
            } finally {
              if ( writer != null ) {
                writer.close();
              }
            }
        valid: true
        feedback: "The try-catch-finally works to deal with this problem but it takes many lines, no ?"
      -
        text: |-
          .. code-block:: java

            try (PrintWriter writer = new PrintWriter(new File("EPL.txt"))) {
              writer.write("WhateverStringIWant");
            } catch(Exception err) {
              err.printStackTrace();
            }
        valid: true
        feedback: "Always prefer the try-with-resources notation as it takes much less code lines"