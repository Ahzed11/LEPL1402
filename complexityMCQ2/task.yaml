accessible: true
author: Bastin J, Piron H
categories:
- module2
context: |
    The three first questions are gonne be time complexity questions about trees, the trees we are talking about is a complete ordered binary tree. Like the example you see here under:

    .. image:: /course/LEPL1402/complexityMCQ2/binaryTree.png
       :scale: 60%
       :align: center
       :height: 375px
       :width: 653px


    The rest of the questions are harder question about the time complexity of operations on list and arrays. Some questions will be about simple linked list, other about double linked list and some about circular linked list.


    .. image:: /course/LEPL1402/complexityMCQ2/doublylinkedlist.png
       :scale: 20%
       :align: center
       :height: 129px
       :width: 1920px


    .. image:: /course/LEPL1402/complexityMCQ2/circularlinkedlist.png
       :scale: 20%
       :align: center
       :height: 329px
       :width: 1920px

    .. image:: /course/LEPL1402/complexityMCQ2/singlylinkedlist.png
       :scale: 20%
       :align: center
       :height: 193px
       :width: 1920px
environment: mcq
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: 'Time Complexity : harder MCQ'
network_grading: false
problems:
    mcq:
        choices:
        -   text: :math:`\Theta(n)`
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\mathcal{O}(nlog(n))`
        -   valid: true
            text: :math:`\Theta(log(n))`
            feedback: GOOD JOB
        limit: 0
        name: Depth
        header: In what complexity can you determine the depth of a tree? (Choose
            the most precise answer)
        type: multiple_choice
    mcq2:
        choices:
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\Omega(log(n))`
        -   text: :math:`\mathcal{O}(log(n))`
            valid: true
        -   text: :math:`\Theta(log(n))`
        -   text: :math:`\Omega(1)`
            valid: true
        -   text: :math:`\Theta(n)`
        name: Find
        header: 'The tree is still a complete ordered binary tree, in what complexity(ies)
            can you find an element? '
        type: multiple_choice
        limit: 0
        multiple: true
    mcq3:
        choices:
        -   text: :math:`\Theta(n)`
            valid: true
        -   text: :math:`\Theta(nlog(n))`
        -   text: :math:`\mathcal{O}(nlog(n))`
        -   text: :math:`\Theta(n^2)`
        limit: 0
        header: 'What is the complexity of in order traversal? '
        name: Traversal
        type: multiple_choice
    mcq4:
        choices:
        -   valid: true
            text: :math:`\Theta(1)`
        -   text: :math:`\Theta(n)`
        -   text: :math:`\mathcal{O}(1)`
        -   text: :math:`\mathcal{O}(n)`
        type: multiple_choice
        limit: 0
        header: What is the time complexity of finding the maximum in a sorted array?
            (Where n is the size of the array)
        name: Sorted Array
    mcq5:
        choices:
        -   valid: true
            text: :math:`\Theta(n)`
        -   text: :math:`\Theta(n^2)`
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\mathcal{O}(1)`
        name: Simple linked list
        limit: 0
        type: multiple_choice
        header: |-
            Consider a simple linked list like the one you see on the image, we only have a reference to the head of the list.  What is the complexity of finding the size **n** of the list

            .. image:: /course/LEPL1402/complexityMCQ2/singlylinkedlist.png
               :scale: 20%
               :align: center
               :height: 193px
               :width: 1920px

            \
    mcq6:
        choices:
        -   text: :math:`\Theta(n)`
            valid: true
        -   text: :math:`\Theta(1)`
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\mathcal{O}(1)`
        limit: 0
        name: ''
        header: |+
            Consider the following ordered simple linked list, we only have a reference to the head of the list. What is the complexity of finding the **maximum** of the list? (Where **n** is the size)

            .. image:: /course/LEPL1402/complexityMCQ2/orderedsinglylinkedlist.png
               :scale: 20%
               :align: center
               :height: 193px
               :width: 1920px

            \

        type: multiple_choice
    mcq7:
        limit: 0
        choices:
        -   text: :math:`\Theta(1)`
            valid: true
        -   text: :math:`\Theta(n)`
        -   text: :math:`\mathcal{O}(1)`
        -   text: :math:`\mathcal{O}(n)`
        name: ''
        header: |
            Consider the following ordered simple linked list, we only have a reference to the head of the list. What is the complexity of finding the **minimum** of the list? (Where **n** is the size)

            .. image:: /course/LEPL1402/complexityMCQ2/orderedsinglylinkedlist.png
               :scale: 20%
               :align: center
               :height: 193px
               :width: 1920px

            \
        type: multiple_choice
    mcq8:
        choices:
        -   text: :math:`\mathcal{O}(1)`
        -   text: :math:`\Theta(1)`
        -   text: :math:`\Theta(n)`
        -   valid: true
            text: :math:`\mathcal{O}(n)`
        -   text: :math:`\Omega(n)`
        -   valid: true
            text: :math:`\Omega(1)`
        limit: 0
        multiple: true
        header: |-
            The ``replaceValue`` method given bellow takes in parameter :
                - The **head** of a linked list of nodes
                - The **oldValue** to be replaced by the **newValue**.

            .. code-block:: java

                private class Node {

                    Node next;
                    int value;

                    Node(int value){
                        this.value = value;
                    }
                }

                public void replaceValue(Node head, int oldValue, int newValue){
                    if(head.next != null && oldValue != newValue) {
                        if (head.value == oldValue){
                            head.value = newValue;
                            oldValue = newValue;
                        }
                        replaceValue(head.next, oldValue, newValue);
                    }
                }

            Give the time complexity(ies) of ``replaceValue`` knowing that the linked list has a size of **n**.
        name: ''
        type: multiple_choice
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
