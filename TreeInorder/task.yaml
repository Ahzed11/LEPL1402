accessible: true
author: Yakoub J, Rucquoy A
categories:
- module2
context: |-
    In this task, we ask you to implement two different version of an "in-order" tree traversal : a recursive version and
    an iterative version. Both function will take a ``Node`` representing the root of the tree itself and a ``List<Integer>`` that
    you have to fill with the tree nodes' ``val`` respecting the "in-order" traversal.

    **Example**:  the following tree, when explored in an in-order fashion, will give
    ``A,B,C,D,E,F,G,H,I``. This type of tree traversal is thus very useful to retrieve all nodes from a tree as an ordered list,
    provided that the tree itself is "sorted", i.e, for each node, its left subtree only contain "smaller" nodes and its right
    subtree only contain "greater" nodes (which is the case in the example, considering the alphabetical order).


    .. image:: /course/LEPL1402/TreeInorder/inorder.png
       :scale: 100%
       :align: center
       :height: 218px
       :width: 240 px



    Here are the skeleton of the Node_ and Traversal_ classes:

    .. code-block:: java

        public class Node {

            public int val;

            public Node left;
            public Node right;

            public Node(int val){
                this.val = val;
            }

            public boolean isLeaf(){
                return this.left == null && this.right == null;
            }
        }


        import java.util.List;
        import java.util.Stack; // this should give you a hint for the iterative version

        public class Traversal {

            public static void recursiveInorder(Node root, List<Integer> res) {
                // YOUR CODE HERE
            }


            public static void iterativeInorder(Node root, List<Integer> res){
                // YOUR CODE HERE
            }

        }

    .. _Node: /course/LEPL1402/TreeInorder/Node.java
    .. _Traversal: /course/LEPL1402/TreeInorder/Traversal.java
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[TESTABLE] Binary trees - Inorder traversal'
network_grading: false
order: 7
problems:
    student_recursive:
        name: ''
        header: 'Paste here the **body** of your ``recursiveInorder(Node root, List<Integer>
            res)`` method:'
        language: java
        default: ''
        type: code
    student_iterative:
        language: java
        type: code
        default: ''
        header: 'Paste here the **body** of your ``iterativeInorder(Node root, List<Integer>
            res)`` method:'
        name: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
